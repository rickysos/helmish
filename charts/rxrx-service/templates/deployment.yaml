apiVersion: {{ .Values.deployment.apiVersion | default "apps/v1" }}
kind: Deployment
metadata:
  name: {{ template "service.fullname" . }}
  labels:
{{ include "service.labels.standard" . | indent 4 }}
spec:
{{- if .Values.kedaScaler.enabled }}
  replicas: {{ .Values.kedaScaler.minReplicaCount | default 1 }}
{{- else if eq $.Values.hpa.enabled false }}
  replicas: {{ .Values.replicas }}
{{- end }}
  revisionHistoryLimit: {{ .Values.replicaSetRetentionLimit }}
  strategy:
{{ toYaml .Values.deployment.updateStrategy | indent 4 }}
  selector:
    matchLabels:
      release: {{ .Release.Name }}
      app: {{ template "service.fullname" . }}
  template:
    metadata:
      labels:
        service: {{ .Release.Name }}
        release: {{ .Release.Name }}
        app: {{ template "service.fullname" . }}
        chart: {{ template "service.chart" . }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        checksum/configome: {{ include (print $.Template.BasePath "/configome-configmap.yaml") . | sha256sum }}
        kubectl.kubernetes.io/default-container: {{ template "service.fullname" $ }}
     {{- with .Values.podAnnotations }}
{{ toYaml . | indent 8 }}
    {{- end }}
    spec:
      initContainers:
      {{- range $container := .Values.initContainers }}
      - name: {{ $container.name }}
        image: {{ $container.image.repository }}:{{ $container.image.tag }}
        {{- if $container.command }}
        command: {{ $container.command }}
        {{- end }}
        env:
        {{- range $key,$val := $container.env }}
          - name: {{ $key }}
            value: {{ $val | quote }}
        {{- end }}
        envFrom:
        {{- if $.Values.config }}
          - configMapRef:
              name: {{ template "service.fullname" $ }}-config
        {{- end }}
        {{- if $.Values.secret }}
          - secretRef:
              name: {{ template "service.fullname" $ }}-secret
        {{- end }}
        {{- if eq $.Values.externalSecrets.enabled true }}
        {{- range $path := $.Values.externalSecrets.relativeVaultPaths }}
          - secretRef:
              name: {{ template "service.fullname" $ }}{{ $path | replace "/" "-" }}-vault
        {{- end }}
        {{- end }}
        volumeMounts:
        {{- if $.Values.volumeMounts }}
          - name: {{ $.Values.volumeMounts.name }}
            mountPath: {{ $.Values.volumeMounts.mountPath }}
            readOnly: {{ $.Values.volumeMounts.readOnly }}
            {{- if $.Values.volumeMounts.subPath }}
            subPath: {{ $.Values.volumeMounts.subPath }}
            {{- end }}
        {{- end }}
        {{- if $.Values.volumeMounts2 }}
          - name: {{ $.Values.volumeMounts2.name }}
            mountPath: {{ $.Values.volumeMounts2.mountPath }}
            readOnly: {{ $.Values.volumeMounts2.readOnly }}
            {{- if $.Values.volumeMounts2.subPath }}
            subPath: {{ $.Values.volumeMounts2.subPath }}
            {{- end }}
        {{- end }}
      {{- if $.Values.configome }}
          - name: configome-volume
            mountPath: /root/
      {{- end }}
      {{- end }}
      containers:
      {{- if eq .Values.cloudsqlproxy.enabled true }}
        - name: cloudsql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:1.27.0-alpine
          command: [ "/cloud_sql_proxy", "-term_timeout=30s", "-enable_iam_login", "-ip_address_types=PRIVATE", "-instances={{ .Values.cloudsqlproxy.instances }}" ]
          {{- if .Values.cloudsqlproxy.lifecycle }}
          lifecycle:
          {{- with .Values.cloudsqlproxy.lifecycle }}
{{ toYaml . | indent 12 }}
          {{- end }}
          {{- end }}
          securityContext:
            runAsNonRoot: true
          resources:
            requests:
              memory: "2Gi"
              cpu: "1"
      {{- end }}
        - name: {{ template "service.fullname" $ }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.commandOverride }}
          command:
          {{- with .Values.commandOverride }}
{{ toYaml . | indent 10 }}
          {{- end }}
          {{- end }}
          {{- with .Values.image.args }}
          args:
{{ toYaml . | indent 10 }}
          {{- end }}
          envFrom:
          {{- if .Values.config }}
            - configMapRef:
                name: {{ template "service.fullname" $ }}-config
          {{- end }}
          {{- if .Values.secret }}
            - secretRef:
                name: {{ template "service.fullname" $ }}-secret
          {{- end }}
          {{- if eq $.Values.externalSecrets.enabled true }}
          {{- range $path := .Values.externalSecrets.relativeVaultPaths }}
            - secretRef:
                name: {{ template "service.fullname" $ }}{{ $path | replace "/" "-" }}-vault
          {{- end }}
          {{- end }}
          {{- if .Values.envFrom }}
            {{- toYaml .Values.envFrom | nindent 12 }}
          {{- end }}
          {{- with .Values.readinessProbe }}
          readinessProbe:
{{ toYaml . | indent 14 }}
          {{- end }}
          {{- with .Values.livenessProbe }}
          livenessProbe:
{{ toYaml . | indent 14 }}
          {{- end }}
          {{- with .Values.startupProbe }}
          startupProbe:
{{ toYaml . | indent 14 }}
          {{- end }}
          {{- with .Values.lifecycle }}
          lifecycle:
{{ toYaml . | indent 14 }}
          {{- end }}
      {{- if .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- end }}
          volumeMounts:
        {{- if .Values.volumeMounts }}
            - name: {{ .Values.volumeMounts.name }}
              mountPath: {{ .Values.volumeMounts.mountPath }}
              readOnly: {{ .Values.volumeMounts.readOnly }}
              {{- if .Values.volumeMounts.subPath }}
              subPath: {{ .Values.volumeMounts.subPath }}
              {{- end }}
        {{- end }}
        {{- if .Values.volumeMounts2 }}
            - name: {{ .Values.volumeMounts2.name }}
              mountPath: {{ .Values.volumeMounts2.mountPath }}
              readOnly: {{ .Values.volumeMounts2.readOnly }}
              {{- if .Values.volumeMounts2.subPath }}
              subPath: {{ .Values.volumeMounts2.subPath }}
              {{- end }}
        {{- end }}
        {{- if .Values.configome }}
            - name: configome-volume 
              mountPath: /root/
        {{- end }}
          {{- with .Values.resources }}
          resources:
{{ toYaml . | indent 12 }}
          {{- end }}
    {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
        - name: {{ .Values.imagePullSecrets }}
    {{- end }}
    {{- if .Values.serviceAccount }}
      serviceAccountName: {{ .Values.serviceAccount.name}}
    {{- end }}
      volumes:
    {{- if .Values.volumeMounts }}
        - name: {{ .Values.volumeMounts.name }}
          secret:
            secretName: {{ .Values.volumeMounts.secretName }}
            {{- if .Values.volumeMounts.defaultMode }}
            defaultMode: {{ .Values.volumeMounts.defaultMode }}
            {{- end }}
    {{- end }}
    {{- if .Values.volumeMounts2 }}
        - name: {{ .Values.volumeMounts2.name }}
          secret:
            secretName: {{ .Values.volumeMounts2.secretName }}
            {{- if .Values.volumeMounts2.defaultMode }}
            defaultMode: {{ .Values.volumeMounts2.defaultMode }}
            {{- end }}
    {{- end }}
    {{- if .Values.configome }}
        - name: configome-volume
          configMap:
            name: {{ template "service.fullname" . }}-configome-config
    {{- end }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
